<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>stupid _ prizes</title>
    <link>https://vacoj.github.io/</link>
    <description>Recent content on stupid _ prizes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>Copyright © 2017 Joe Vacovsky Jr.</copyright>
    <lastBuildDate>Wed, 27 Sep 2017 20:16:23 -0700</lastBuildDate>
    
	<atom:link href="https://vacoj.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Trebot</title>
      <link>https://vacoj.github.io/projects/trebot/</link>
      <pubDate>Wed, 27 Sep 2017 20:16:23 -0700</pubDate>
      
      <guid>https://vacoj.github.io/projects/trebot/</guid>
      <description>https://github.com/vacoj/trebot
for go-chat-bot https://github.com/go-chat-bot/bot Usage / Bot Interaction Get a new question !trivia new  Answer a question !trivia answer pineapple  View the Scoreboard !trivia scoreboard  +------+------------------+--------+---------+-------+-----+----------+ | RANK | USER | SCORE | CORRECT | WRONG | NEW | ACCURACY | +------+------------------+--------+---------+-------+-----+----------+ | 1 | casey | 225300 | 164 | 122 | 15 | 0.573 | | 2 | viki | 63800 | 111 | 234 | 42 | 0.</description>
    </item>
    
    <item>
      <title>LaTeX Resume</title>
      <link>https://vacoj.github.io/posts/resume_updating/</link>
      <pubDate>Wed, 27 Sep 2017 19:00:37 -0700</pubDate>
      
      <guid>https://vacoj.github.io/posts/resume_updating/</guid>
      <description>I recently updated my resume. A few versions of my old CV and plain old resume were floating around in various cloud storage products, but thought it was time to try something new (although, it&amp;rsquo;s really not new at all).
Also, interestingly enough, it&amp;rsquo;s pronounced &amp;ldquo;La Tech&amp;rdquo;:TeX (/ˈtɛx/ as in Greek, but often pronounced /tɛk/ in English) ... &#39;ch&#39; like in &#39;loch&#39;`
\newcommand{\resumeSubheading}[4]{ \vspace{-1pt}\item \begin{tabular*}{0.97\textwidth}{l@{\extracolsep{\fill}}r} \textbf{#1} &amp;amp; #2 \\ \textit{\small#3} &amp;amp; \textit{\small #4} \\ \end{tabular*}\vspace{-5pt} }  Above snipped was taken from https://github.</description>
    </item>
    
    <item>
      <title>Neatlights</title>
      <link>https://vacoj.github.io/projects/neatlights/</link>
      <pubDate>Tue, 26 Sep 2017 18:41:13 -0700</pubDate>
      
      <guid>https://vacoj.github.io/projects/neatlights/</guid>
      <description>The Gist of It In the config/config.py file, set up appropriate info for the redis pubsub instance you want to listen on. Posting a json blob/python dictionary on the specified channel will result in the listening thread parsing the message, and configuring the LED strand as specified. Examples can be found in config/blink_patterns.py.
 When passing colors into the message, use the CSS3 color names: [&amp;lsquo;black&amp;rsquo;, &amp;lsquo;red&amp;rsquo;, &amp;lsquo;cornflowerblue&amp;rsquo;, &amp;lsquo;paleturquoise&amp;rsquo;].</description>
    </item>
    
    <item>
      <title>Fasturtle</title>
      <link>https://vacoj.github.io/projects/fasturtle/</link>
      <pubDate>Tue, 26 Sep 2017 15:19:24 -0700</pubDate>
      
      <guid>https://vacoj.github.io/projects/fasturtle/</guid>
      <description>This tool&amp;rsquo;s input files can be easily generated from existing web.config files by using ShinRoller. (https://github.com/vacoj/shinroller)
Installation go get -u github.com/vacoj/fasturtle go get -u github.com/vacoj/shinroller # recommended  Usage CLI Help Usage of fasturtle: -assemblybindingssource string The path to a configuration file containing the correct assembly bindings for the project. This was added to solve for an issue where bindings set in a base config didn&#39;t match thoseset in the token config.</description>
    </item>
    
    <item>
      <title>Mindbody Django</title>
      <link>https://vacoj.github.io/projects/mindbody-django/</link>
      <pubDate>Tue, 26 Sep 2017 12:25:05 -0700</pubDate>
      
      <guid>https://vacoj.github.io/projects/mindbody-django/</guid>
      <description>MINDBODY Django Demo
A demonstration showing how to build an integration with the MINDBODY SOAP API using Python 3 and Django 1.8. I did this in my spare time, so bugs are likely. I&amp;rsquo;ll try to fix them as I find them.
Initial Setup - Linux (If someone wants to make a quick setup for windows, that would be helpful.)
Step 1. Create a virtual environment in the root of the project folder virtualenv -p /usr/bin/python3.</description>
    </item>
    
    <item>
      <title>Mindbody-API-Golang</title>
      <link>https://vacoj.github.io/projects/mindbodyapigolang/</link>
      <pubDate>Tue, 26 Sep 2017 12:14:47 -0700</pubDate>
      
      <guid>https://vacoj.github.io/projects/mindbodyapigolang/</guid>
      <description>This is a wrapper around the SOAP API XML contracts available to Mindbody API partners, written in Go.
Getting Started Install packages for each service you wish to use go get -u &amp;quot;github.com/vacoj/Mindbody-API-Golang/siteservice&amp;quot; go get -u &amp;quot;github.com/vacoj/Mindbody-API-Golang/staffservice&amp;quot; go get -u &amp;quot;github.com/vacoj/Mindbody-API-Golang/clientservice&amp;quot; go get -u &amp;quot;github.com/vacoj/Mindbody-API-Golang/classservice&amp;quot; go get -u &amp;quot;github.com/vacoj/Mindbody-API-Golang/saleservice&amp;quot; go get -u &amp;quot;github.com/vacoj/Mindbody-API-Golang/appointmentservice&amp;quot; go get -u &amp;quot;github.com/vacoj/wsdl2go&amp;quot; go get -u &amp;quot;github.com/vacoj/wsdl2go/soap&amp;quot;  Follow this pattern to make requests and parse calls func makeGetSitesCall() { cli := soap.</description>
    </item>
    
    <item>
      <title>Pirrigo</title>
      <link>https://vacoj.github.io/projects/pirrigo/</link>
      <pubDate>Tue, 26 Sep 2017 11:30:21 -0700</pubDate>
      
      <guid>https://vacoj.github.io/projects/pirrigo/</guid>
      <description>PirriGo - Irrigation and garden management application, in Go and Angular. Based on Pirri.
Live Demo: http://pirri.vacovsky.us login/password are demo / demo Screenshots Login page 
Main / Stations 
Calendar 
Station Scheduler 
History of Activity 
Charted Run Stats 
Usage 
Features  Activate irrigation zones on a schedule, or manually Track total seconds spent watering by zone, day of the week, and other metrics Estimate monthly costs to operate your irrigation system Using WeatherUnderground, leverage current weather data to automatically regulate watering (increase in heat waves, reduce when rain will do the job for you)  Setup Clone repository to your Pi git clone https://github.</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://vacoj.github.io/posts/my-first-real-post/</link>
      <pubDate>Tue, 26 Sep 2017 08:46:56 -0700</pubDate>
      
      <guid>https://vacoj.github.io/posts/my-first-real-post/</guid>
      <description>&lt;p&gt;This is my first post!&lt;/p&gt;

&lt;p&gt;This is &lt;a href=&#34;https://github.com/vacoj/&#34;&gt;my github&lt;/a&gt; pages site.  Built using &lt;a href=&#34;https://gohugo.io&#34;&gt;Hugo&lt;/a&gt;, and that&amp;rsquo;s kinda nifty.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>